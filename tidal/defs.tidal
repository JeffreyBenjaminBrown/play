--   vv evan's film vv


--   ^^ evan's film ^^

-- SHOULD BE TEMPORARY

dur 4
let hi1 = "18*4!! [18*2 -13*2]"
let hi2 = "18*4! [18*2 [31 33 25]] [31*2 -13*2]"
-- let hi2 = "18*8! [18*4!! [31 33 25]]] 31*8 -13*8"
let g =  gain "1 0.8! 1 0.8! 1 0.8! 1 0.8!!! 1!"
d1 $ hi "0 0 0 7 7 7 2 2 2!!!!! 15!" |*| g |*| sound "jvbass" |*| pan "1"
d2 $ fast 1 $ sound "hh!! [hc ho]"
d3 $ hi ## slow 4 ## sineCorr <$> cat [hi1,hi2] |*| sound "sine"

cps 1
let arp = hi "-13 0 18 31"
d1 $ arp |*| sound "jvbass" |*| hi "0"
d2 $ slow 2 $ arp |*| sound "sine" |*| hi "3.7"

-- snoop gin 


-- 2015 10 27, evan's film

let v1 = sound "psr"
let m1 = "[0,18] [0 [3,9] [7,18]]" :: Pattern Double
let m2 = "[0 18 0] [0 3 7 0 11 14 0 18] [3,9] [7,18]*3]" :: Pattern Double
let mLar = "0 [18 4] 0 [4 18] 13 [25 26] 25 24" :: Pattern Double
let m3 = (2.5*) <$> run 5
let p5 = (*(18/3)) 

-- 2015 10 26

let m1 = listToPat [0, 2, 4, 6, 8, 10]
let m2 = listToPat [0, 3, 5, 8, 10]
let m3 = listToPat [0, 3, 7, 10]
let m4 = listToPat [0,5,10]
let n1 = cat [m1, rev m1, m2, rev m2, m3, rev m3, m4, rev m4]
let n2 = cat [n1, (1/5) <~ n1] -- this evaluates even if the last n1 
let v = sound "metal" |+| hi "-31"
let r = sound "bd*10" |+| v


-- 2015 10 21
