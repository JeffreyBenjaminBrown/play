-- testing echo
d1 $ echo (1/4) $ sd "hh"

-- 2016 09 10, testing loopSeq by Alex McLean
d1 $ seqPLoop [(0,1,sd "bd"),(1,1.5,sd "hc*4")] -- Yes!

-- 2016 04 27, the first fractions
import Data.List (sort)
import Data.Ratio --just for (%), but I can't (?) qualify to that
let fracs max = (%) <$> [1..max] <*> [1..max]
let firstOctave r = if r < 1 then firstOctave $ 2*r else if r > 2 then firstOctave $ r/2 else r
let h f = 12 * log f / log 2 -- hzTo12et
let rs max = map (\f -> (f, h $ fromRational f)) $ sort <$> nub $ firstOctave <$> fracs max
mapM_ putStrLn $ map show $ rs 16

-- 2016 03 20
d1 $ fast 2 $. sound "pluck" |*| pan "0 1" -- pan: [0,1]

d1 $ sound "pluck*3" |*| slow 3 $. resonance "0.01 0.1 1" |*| slow 3 $. cutoff "0.01 0.1 1" -- cutoff and reson only work together!

d1 $ slow 2 $ accelerate "0 0.04 [0,0.1]" |*| sound "f" -- acc ~ vibrato!
d1 $ sound "wobble" |*| accelerate "2" -- rising fourth in bass!

d1 $ slow 4 $ accelerate "0*4 0.09*8" |*| up "0 -0.5" |*| sound "f" -- locally, in some small neighborhood of zero, a halfstep of acceleration is about 0.09 in the acceleration metric (so dropping that path in pitch-space by half a halfstep, 0.5 in the up metric, normalizes it)

-- crush's domain is insane!
d1 $ crush "0" |*| sound "f"   -- no *effect*
d1 $ crush "0.5" |*| sound "f" -- no sound
d1 $ crush "1" |*| sound "f"   -- no sound
d1 $ crush "1.1" |*| sound "f" -- low-duty
d1 $ crush "1.3" |*| sound "f" -- near fully duty
d1 $ crush "1.38" |*| sound "f" -- about full duty
d1 $ crush "2" |*| sound "f" -- buzzy
d1 $ crush "3" |*| sound "f" -- less buzzy
d1 $ crush "4" |*| sound "f" -- mellowing, fading
d1 $ crush "5" |*| sound "f" -- near gone
d1 $ crush "6" |*| sound "f" -- about gone

-- shape: -1 max 0 none 1 max, roughly 0-symmetric
d1 $ shape "100" |*| sound "f"   
d1 $ shape "1" |*| sound "f"   
d1 $ shape "0.5" |*| sound "f"   
d1 $ sound "f"
d1 $ shape "0" |*| sound "f"   
d1 $ shape "-0.1" |*| sound "f"   
d1 $ shape "-0.5" |*| sound "f"   
d1 $ shape "-0.6" |*| sound "f"
d1 $ shape "-0.8" |*| sound "pluck"
d1 $ shape "-1" |*| sound "f"   
d1 $ shape "-10000" |*| sound "f"   

-- ** coarse ~ overtones
d1 $ coarse "1" |*| sound "f"
d1 $ coarse "2" |*| sound "f"
d1 $ coarse "3" |*| sound "f"
d1 $ coarse "4" |*| sound "f"
d1 $ coarse "5" |*| sound "f"
d1 $ coarse "10" |*| sound "f"
d1 $ coarse "16" |*| sound "f"
d1 $ coarse "17" |*| sound "f"
d1 $ coarse "17" |*| sound "sax"
d1 $ coarse "43" |*| sound "f"
d1 $ coarse "43" |*| sound "sax"

dur 1
d1 $ vowel "a" |*| sound "sax"
d1 $ vowel "e" |*| sound "sax"
d1 $ vowel "i" |*| sound "sax"
d1 $ vowel "o" |*| sound "sax"
d1 $ vowel "u" |*| sound "sax"

-- 2016 03 18
hush
dur 2
let ps1 = "{x ~ x}%8" :: Pattern String -- (%) restarts each measure!
d1 $ sound "bd"
d2 $ sound $. pp ps1 "psr"

hush
dur 2
let ps1 = "{x ~ x}%4 {x ~ x}%4" :: Pattern String -- (%) restarts each mention!
d1 $ sound "bd"
d2 $ sound $. pp ps1 "psr"

-- 2016 03 16
d4 $ sound "{psr psr}%3"
d3 $ sound "cp"

-- 2016 03 14
d1 $ soundToEvts g123 4 -- plays the sound at 4 in the graph!

-- 2016 03 13
dur 2 -- works : different cut groups on the same sample in the same voice
d1 $ overlay (sound "f*4"|*|cut"1") (rr (1/8) $ sound "f*4" |*| up "3"|*|cut"2")

-- 2016 02 26-ish
hush
dur 1 -- changewhen
let p1 = sound "bd*4 hh*4"
let p2 = sound "sn*4 hc*4"
let aTest now n = (\t -> (floor t) > div (floor now) n * n + n)
let f n = d1 $ changeWhen (aTest now n) p1 p2
f 7
now

-- playWhen starts at mod 2 where I expect mod 0
hush
now
dur 1.8
let p1 = sound "bd*4 hh*4"
let aTest denom = d1 $ playWhen (\t -> (floor t) > div (floor now) denom * denom + denom) p1
aTest 5 -- how to use the test: execute "testPlayWhen n" for some n
  -- then repeatedly evaluate "now" (in this buffer, not *tidal*)
  -- evaluate "now" one last time when it starts playing, 
    -- before the end of the first cycle
  -- so far the result always seems to be equal to 2 mod n
    -- I tested n=3,4,5,7,9, and I tried restarting Tidal and Dirt

dur $ 35/200 -- patterns can be very long (here, 10000 notes)
d1 $ striate 7 $ slow 10000 $ hi $. (flip (/) 10) <$> run 10000 |*| sound "bass"

-- 2015 12 08
dur 0.4 -- * multi-wavelength
-- I hear but don't understand the difference.
hush1
d1 $ slow 2 $ sound "bd hh/8 sn/2     hc/4"
d1 $ slow 2 $ sound "bd hh/8 [~ sn]/2 hc/4"

-- 2015 11 12 -- industrial
hush -- * 2 good code ideas, but not the greatest music yet
  -- rand pan, & seq of bjorklund (n,m) rhythms
dur 2.5
d2 $ slow 3 $ sound "bd(13,16) can(11,16) [psr:4(15,24),sn*4] hh(5,8)"
d3 $ slow 3 $ hi "[0,7,14](10,16) [1 0 -1 0 0]*4 [[0,8,13]*3 [1 0]*2 [0,10,18,20]]*2" |*| sound "metal:2" |*| pan rand |*| hi "-62"

hush
d1 $ sound "f(11,16)*2" |*| speed "7 [8,9] [13.5,12]" |*| speed "0.1"
d2 $ slow 4 $ sound $. (1/3) <~ "[f,[bd hh]/2]*32" |*| speed "[4.5,4] 3.5 3 2.9" |*| speed "0.25"
dur 2

-- 2015 10 14
d1 $ sound $ samples "future*9" $ run 10 -- * samples, howto

hush
dur 2
let dl = "bd?!? sn?!" -- random!
d1 $ sound $ stack [dl, (1/4) <~ dl,"hh?*8"]
