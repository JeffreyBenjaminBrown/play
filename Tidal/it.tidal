let p1 = "~ 0*2 4 0 2 -2 ~!!! 0*2! -2 2 0 ~" :: Pattern Double
d1 $ slow 2 $ up p1 |*| up "[7]" |*| sound "[wobble,metal]" |+| kriole "1"
  -- want: transpose metal by a different amount than 24

d1 $ striate 24 $ sound "noise2:6*7 [noise2:6*9 noise2:6*12 noise2:7*7]/3"-- pitch from noise!
d2 $ sound "bd hh hh ~ sn hh hh [~ bd*2]/2"
d3 $ slow 2 $ sound "jvbass*8" |+| up "0 3"
d4 $ slow 2 $ sound "psr*8" |+| up "0 4 8 8.5 7 5 4 2" |+| gain "1.1"


d1 $ slow 5 $ sound $ samples "noise2*10" $ run 10 -- bad? so many 10s
d2 $ slow 5 $ (1/20) <~ sound "metal"

d1 $ slow 2 $ up p1 |*| up "[7]" |*| sound "[wobble,metal]" |+| kriole "1"

let p1 = "~ 0*2 4 0 2 -2 ~!!! 0*2! -2 2 0 ~" :: Pattern Double
d1 $ slow 2 $ up p1 |*| up "12" |+| sound "jvbass" -- Ghost Busters!
d2 $ sound "bd sn"

let fast = density
d1 $ sound "psr*12" |+| speed "1 2 3" |+| speed "0.7 2.3! 1" |*| (fast 4 $ speed "1 1.2")
cps 0.7

d1 $  speed "1 [2 1.5 2.5 3.5]!" |+| sound "metal psr!" |+| gain "1 0.8 [1.2 1]" |+| cut "1" -- first (speed) sets onsets

let fx = shape "1.1" |+| coarse "3" |+| gain "0.824"
let fw = gain $ (* 0.85) <$> "1.1 1!! 0.9 1!!" -- front wave
d1 $ slow 2 $ sound "bd ~ [sn [~ cp]/2 ~]/3" |+| fx |+| fw
d2 $ fast 2 $ (1/3) <~ sound "bd [sn [sn*2 ~]/2 cp]/2"


let pat = "1.2 0.75 1"
let wave =               gain pat
let longWave =  slow 4 $ speed pat
let shortWave = fast 2 $ bandq pat |+| bandf pat |+| coarse pat
d1 $ sound "psr*6" |+| cut "1" |+| wave |+| shortWave |+| longWave
cps 1


let pat = "1 2"
let wave = speed pat
let longWave = slow 2 $ speed pat
let shortWave = slow 2 $ speed pat
d1 $ sound "psr*4" |+| cut "1" |+| wave |+| longWave |+| shortWave
d1 $ sound "psr*4" |+| cut "1" |+| shortWave 


let pat = "1.1 0.8! 1.3 0.8!"
let shortWave = fast 2 $ shape pat
let longWave = slow 4 $ gain pat
d1 $ sound "jvbass*6" |+| shortWave |+| longWave
d1 $ sound "jvbass*6" |+| shortWave
d1 $ sound "psr*6" |+| longWave

d2 $ sound "jvbass*8" |+| pit 0 "0 10 [18,25] 29"

cps 0.7






d1 $ sound "psr*8" |+| (pit 0 $ fmap (scal sDia) $ run 5) -- scales!

d1 $ sound "bd!! [sn cp]/2" -- rotate fill!

d1 $ cyc ($) [density 2, rev, slow 2, striate 3, (|+| speed "0.8")] $ sound "[bd*2 [~ bd]] [sn future]*2 cp jvbass*4"

d1 $ cyc ($) [(|+| pan triwave),(|+| speed "0.768"),(|+| speed "0.75")] $ sound "[bd*2 [~ bd]] [sn future]*2 cp jvbass*4"

d1 $ sound $ samples "future*9" $ run 10
d2 $ sound "metal sn sn"
cps 0.5

d1 $ sound "psr*3" |+| (slowspread pit [0,0] $ slow 4 "0 10 18") -- weird!
cps 1

-- chord changes!
let psrc = (+1.82) -- psr correction, to harmonize jvbass
d1 $ sound "psr*3" |+| (slow 3 $ cyc pit (psrc <$> [0,6]) $ "0 18 25 -6") |+| gain (fast 3 $ triwave)
d2 $ cyc (<~) [2/3,0] $ sound "~ jvbass*3" |+| (slow 2 $ cyc pit [0,18] "0 10 25") 

let p = slow 2 $ "x x x"
d1 $ sound $ prr 0 (2,1) p "bd sn"
d1 $ sound $ preplace (1,1) "x [~ x] x x" "bd cp! bd cp ho"
d3 $ sound "f"  |+| (pit 0 $ preplace (1,1) "x [~ x] x x" "0 10 18") -- divide by zero?
d3 $ sound "f"  |+| (up $ preplace (1,1) "x [~ x] x x" "0 10 18") -- divide by zero?
d3 $ slow 2 $ sound "f*6" |+| gain "0.7" |+| pit 0 "[0, 14] [14, 18][18,25] [10,25] [8,26] [2,16]"

let fcorr = (+ 7)
d1 $ slow 4 $ sound "jvbass*4 [jvbass*2 ~] ~ " |+| cyc pit [-10,-18,-0] "0 8 8" |+| gain "1.1"
d2 $ sound "f*6" |+| gain "0.7" |+| cyc pit (fcorr <$> [0,-6]) "[-6 12] [0,10] [14,25]"
d2 $ sound "f*6" |+| gain "0.7" |+| cyc pit (fcorr <$> [0,-6]) "-7 [8,14] 18 [25,27,29] [30,32] [31,31.07]"
d2 $ sound "bleep:4*8" |+| gain "0.5 0.55" |+| cyc pit (fcorr  <$> [-50,-20]) "-7 [8,14] 18 [25,27,29] [30,32] [31,31.07]"
d3 $ silence
d3 $ slow 8 $ sound "[bd sn]!! [ht cp] [bd sn]!! [ht sn:1*3]" |+| gain "1.4"
d4 $ sound $ (0.008) <~ preplace (1,1) "[x ~ x] ~ [x x ~]" "ho hc hc:2"
d4 $ sound $ slow 2 $ (0.008) <~ preplace (1,1) "[x [~ x]] x [x x*2]" "ho ho:2 hc hc:2"

d1 $ slow 2 $ sound "psr*9" |+| (pit 0 $ listToPat $ mode sDia 2)
d2 $ slow 4 $ sound "psr*4" |+| (pit 10 $ listToPat sDia)

d1 $ (spread'(striate' 4)((+0.2)<$>slow 8 sine1)) $ jux rev  $ sound (samples "[latibro*6,bd]/2""0 7 15") |+| speed "[1 2 1.5 1.2]/4"

d1 $ chop 8 $ spread slow [1/4, 2, 4] $ sound "ho ho:2 ho:3 hc" |+| gain (slow (1/8) $ (*2) <$> triwave)

d2 $ spread chop [2,8] $ spread slow [1/4, 2, 4] $ sound "bleep" |+| gain (slow (1/8) $ (*2) <$> triwave)

cps 1 -- muddy
d1 $ slow 4 $ striate 3 $ sound "gabba ho*3 ho:2 ho:3 hc*2"
d2 $ slow 4 $ sound "bass*15" |+| pit 0 "0 5 10 13 18 30"
d2 $ silence
d1 $ foldEvery [3, 4, 5] (density 2) $ sound "kurt"
d1 $ foldEvery [2,3] (density 2) $ sound "kurt"
d1 $ whenmod 7 2 (striate 3) $ whenmod 8 5 (density 2) $ sound "bd sn hc"
d1 $ interlace (sound  "bd sn kurt") (every 3 rev $ sound  "bd sn:2")

intercalate (" " :: String) (["hi", "you"] :: [String])
intercalate (" " :: String) ["hi", "you"]

let ic strings = intercalate (" " :: String) strings

cat :: [Pattern a] -> Pattern a
cat ps = density (fromIntegral $ length ps) $ slowcat ps

dat :: [Pattern a] -> Pattern a
dat ps = density (fromIntegral $ length ps) $ slowcat ps

-- munchkin alien sprinkler
d1 $ jux (rev) $ sound "psr*5" |+| pit 0 "0 9 10"
d2 $ slow 2 $ (1/3) <~ sound "notes*7" |+| pit 13 "0 10 13 20" |+| gain "1.3"
d2 $ sound "jvbass*2" |+| pit 0 "0 8"
d3 $ density 4 $ sound "hc ho" |+| pan sinewave |+| gain "0.6"
d4 $ slow 8 $ sound "[bd*2 sn*2]! ~ [cp sn] [bd*2 sn*2]! ~ [cr sn*2]" |+| gain "1.3"

cps 0.4 -- spooky
d1 $ slow 2 $ sound "bd [sn ~ ~ bd] [~ bd bd ~] sn" |+| (density 2 $ shape triwave)
d2 $ slow 2 $ sound "hc*4 [~ hc!!] hc*4 [~ hc cr ~]" |+| (density 6 $ gain triwave)
d3 $ slow 4 $ sound "bleep:1*8" |+| pit (-31) "0 0 31 13 10 10 4 2" |+| gain "1.4"
d4 $ slow 2 $ (1/16) <~ sound "metal:3*16" |+| pit (-31) "0 0 31 13 10 10 4 2" |+| gain (density 6 triwave) |+| gain "0.7"
d5 $ slow 2 $ (0/16) <~ sound "metal:3*16" |+| pit (13-31) "62 93 49 21 29 31 18" |+| gain (density 6 triwave)

-- techno
d1 $ sound "bd [sn ~ ~ bd] [~ bd bd ~] sn" |+| (density 2 $ shape triwave)
d2 $ sound "hc*4 [~ hc!!] hc*4 [~ hc cr ~]" |+| (density 6 $ gain triwave)
d3 $ sound "jvbass*8" |+| pit (-31) "0 0 31 13 8 8 4 2" |+| gain "1.4" |+| cutoff "0.9" |+| resonance "1"
d6 $ sound "jvbass*8" |+| pit (18) "0 0 31 13 8 8 4 2" |+| gain "1.4" |+| cutoff "0.4" |+| resonance "0"
d4 $ (1/16) <~ sound "bottle:2*16" |+| pit (-31) "0 0 31 13 8 8 4 2" |+| gain (density 6 triwave) |+| gain "0.7"
d5 $ (0/16) <~ sound "metal:3*16" |+| pit (13-31) "62 93 49 21 29 31 18" |+| gain (density 6 triwave)

hush -- dance, syncop harm
d1 $ sound "bd [sn ~ ~ bd] [~ bd bd ~] sn" |+| (density 2 $ shape triwave)
d2 $ sound "hc*4 [~ hc:1!!] ho:1*4 [~ hc cr ~]" |+| (density 2.5 $ pan triwave1)
d3 $ sound "jvbass*8" |+| pit (3) "0 0 31 13 8 8 4 2" |+| gain "1.4" |+| cutoff "1 0 1 0" |+| resonance "0"
d6 $ ((1/16) <~ sound "psr*8") |+| pit (18-31) "0 0 31 13 8 8 4 2" |+| gain "1.3" |+| cutoff "0.4" |+| resonance "0" |+| pan (density 3 triwave)
d4 $ (1/16) <~ sound "bottle:2*16" |+| pit (-31) "0 0 31 13 8 8 4 2" |+| gain (density 6 triwave) |+| gain "0.6"
d5 $ (0/16) <~ sound "metal:3*16" |+| pit (13-31) "62 93 49 21 29 31 18" |+| gain (density 6 triwave)

hush
d1 $ sound (samples "{casio ~ bd*3, bd*2 rm*3, numbers lt [mt sn, lt*3 voodoo] sn bass3*2}" "{7 2, 3 1 5}") |+|end rand 

d1 $ sound $ samples "gabba*8" (run 1) |+| end rand

slow 2 $ stack [every 4 rev $ (jux ((|+| speed "0.5") . rev) $ sound "arpy ~ arpy:5 ~ arpy:3 ~") |+| end "0.6" |+| delay "0.9", jux rev $ superimpose (iter 4) $ slow 2 $ sound "[bass3 ~ bass3:3*2 ~ bass3*2 bass3:2]" |+| speed ("[4 8 6]/4") |+| shape "0.4" |+| gain "0.9" |+| delay "0.4", slowspread ($) [id, brak, id, density 2, trunc (1%4), rev] $ sound "ht lt future sn drum ~"

k [s . . k] [. k k .] sn
t*4 . t*3 t*4 . t t**2


d1 $ every 3 (0.5<~) $ jux (spread'(density)"[2 1 3]/4") $ sound "{drum drum odx*2,drum/2 drum/3[hit/7 ~ ~ ~]/4 drum/2 ~}"
d1 $ sound "{drum drum odx*2,drum/2 drum/3[hit/7 ~ ~ ~]/4 drum/2 ~}"
d1 $ slow 2 $ sound $ samples "odx*7" $ run 7
d2 $ sound "f:4*16" |+| pit 0 (fmap (*5) $ run 8) |+| gain "0.7"

d2 $ silence

d2 $ slow 2 $ sound "odx:4*8"
d2 $ silence
--

d1 $ jux (rev) $ sound "[~ pluck]*7" |+| pit (62-6) "0 10 25 11" 
   |+| (slow (1/4) $ pit 62 "0")
d2 $ slow 3 $ (1/3) <~ sound "pluck*7" |+| pit (-6) "0 7 13 20" |+| gain "1.3"

-- yes
let p1 = " 0  0  10 10 18 18 25 25"
let p2 = " 31 25 25 18 13 13 5  5 "
d1 $ sound "psr*8" |+| pit 0     p1 |+| pan "0"
d2 $ slow 2 $ sound "jvbass*8 jvbass" |+| pit (16) p2 |+| pan "1" |+| gain "1.4"
d3 $ (0/16) <~ sound "hc*6 ~" |+| gain "0.8"
d4 $ slow 8 $ sound "gabba sn:2 bd sn:2 bd sn:2 bd sn:2*3 metal sn:2 bd sn:2 bd sn:2 bd sn:2*4" |+| gain "1.4"
cps 0.8
hush

--yes
let p1 = " 0  0   8  8 18 18 29 29"
let p2 = " 29 21 18 17 11 8  8  5"
d1 $ slow 2 $ sound "psr*8" |+| pit (-13)  p1 |+| pan "0"
d2 $ silence
d2 $ slow 2 $ sound "jvbass*8" |+| pit 18 p2 |+| pan "1" |+| gain "1.4"
d4 $ silence
d4 $ slow 8 $ sound "bd sn:2 bd sn:2 bd sn:2 bd sn:2*3 bd sn:2 bd sn:2 bd sn:2 bd sn:2*4" |+| gain "1.4"
d5 $ slow 2 $ sound "metal*8" |+| pit 0 p2 |+| pan "1" |+| gain "1.4"
d3 $ (0/16) <~ sound "hc*8" |+| gain "0.8"

d1 $ jux (rev) $ sound "[~ psr]*7" |+| pit (-20) "0 9 10 25"
d2 $ slow 2 $ (1/3) <~ sound "psr*7" |+| pit 7 "0 10 13 20" |+| gain "0.7 1.15 0.9 1.3"
d3 $ slow 4 $ jux (echo (1/7)) $ sound "hc*2 hc*7 [hc ~ hc]*7 hc*14" |+| pan sinewave  |+| gain (fast 4 sinewave)
d4 $ slow 3 $ sound "bd*7 cp*7" |+| cutoff triwave |+| resonance (slow (1/2) triwave) |+| gain "1"

cps $ (7/8)*0.61
d1 $ stut 4 0.5 (1/4) $ sound "breaks125"
d1 $ striate' 32 (1/16) $ sound "breaks125"

cps $ (7/8)*0.595
d1 $ every 4 (stut 4 0.5 (1/4)) $ sound "breaks125:1"
d2 $ sound "jvbass" |+| pit (-31) "[0,49] 0"
d1 $ striate' 32 (1/16) $ sound "breaks125"

let x = "18 18 18 ~ 24 ~ 18 ~ 31 ~ [39 ~ 39] 31 ~"


let pa3' = sound "cp sn sn"
let pa4' = sound "cp sn sn sn*4"

d1 $ sound $ ic $ ["cp sn sn","cp sn sn sn*4"]

d1 $ sound "bd"

cps (1/2)

[pa3', pa4']

d1 $ append pa3' pa4'

let pa3 = ["cp", "sn", "sn"]
let pa31 = ["if", "sn", "sn"]
let pa4 = ["cp", "sn", "sn", "hh"]
let pa41 = ["if", "sn", "sn", "hh"]
d1 $ slow 2 $ sound $ listToPat $ pa31 ++ pa4 ++ pa3 ++ pa41 ++ pa4

cps 0.7

hush

let pv = "cp sn sn cp sn sn sn cp sn sn cp sn sn sn cp sn sn sn"

d1 $ overlay (sound "hh") (sound "hh:1")

sound $ slow 2 $ "bd"

d1 $ sound $ wedge (3/7) ("bd*3") ("sn*4") -- missing note?



d1 $ sound $ append' ("bd bd bd") ("sn sn sn sn")
d1 $ sound $ cat ["bd bd bd", "sn sn sn sn"]



import Data.List -- intersperse

import Data.List.Split.Internals -- endBy

import Data.String

let p1 = "sn*2 bd cp"
let p2 = slow (4/3) $ "insect cp cp cp"

d1 $ sound "{bd*2, hc:1*3} if" |+| gain "0.5"
d1 $ sound "[bd [bd bd]] cp*3"

d1 $ sound "{bd [ht sn, lt mt ht] lt, ~ cp}%4"

hush

d1 $ sound "kd"

hush
d1 $ sound p1
d2 $ slow (1/2) $ sound p2 |+| gain "0.7"

d1 $ silence

d1 $ sound $ append' p1 p2

d1 $ slow 2 $ sound $ cat [p1, p2]

d2 $ silence

d1 $ sound $ preplace (1,4) "x [~ x] x" "bd sn" 
d1 $ sound $ preplace (1,1) "x(3,8)" "bd sn" 
d1 $ sound "[jvbass jvbass:5]*3" |+| (shape $ "1 1 1 1 1" ~ "0.2 0.9"

let p = slow 2 $ "x x x" in d1 $ sound $ prr 0 (2,1) p "bd sn"

hush

It is assumed the pattern fits into a single cycle. This works well with pattern literals, but not always with patterns defined elsewhere. In those cases use prr and provide desired pattern lengths: @ let p = slow 2 $ "x x x"

d1 $ sound $ prr 0 (2,1) p "bd sn" @




cps 0.8

d1 $ slow 4 $ sound "[bd sn sn, ~ cp]*2  [bd sn cp sn]*2"

d1 $ sound "if [if if]" |+| pit 0 "0 [12 21]"

d1 $ sound "if/2 bd"

d1 $ slow 2 $ sound "if bd ~ bd"

hush


d1 $ slow 1.5 $ sound "{bd [ht sn, lt mt ht] lt, sn cp}"
d1 $ slow 3 $ sound "{cp:1 cp:1 if [ht sn, lt mt ht] lt, bd*4 cp cp}%6"


d1 $ slow 4 $ sound "{bd [ht sn, lt mt ht] lt, sn cp}%4 if"
d2 $ slow 2 $ sound "insect*4" |+| pit 0 "0 -26"

d1 $ slow 4 $ sound "[bd sn sn sn sn, ~ cp]*2  [bd sn cp sn]*2"
d2 $ slow 8 $ sound "insect*2" |+| pit 0 "0 -26"

d1 $ sound "{bd ht ~, insect cp cp cp}"

sound "{bd ht ~, insect cp cp cp}"

d2 $ slow 4 $ sound $ samples "insect*3" $ run 3

hush


-- new day

d1 $ slow 4 $ sound "hh(5,13) bd sn:1" |+| ((1.2/2) <~ pit (-12) "-24 12 24")

d1 $ slow 4 $ sound "hh(5,11) hh(7,11) hh(9,11)"

let pb3 = "cp sn sn" -- pattern, basic(atomic)

let pb4 = "cp sn sn sn"

let p = intercalate " " [pb3, pb4, pb3, pb4, pb4]

d1 $ slow 5 $ sound 
  "if:1 sn sn   cp sn ht sn   if sn sn   cp sn sn sn   cp sn ht sn                   if:2 sn sn   cp sn ht sn   cp sn sn   if sn ht sn   if sn ht ~"

d1 $ slow 4 $ sound "if:1 sn bd cp sn ht sn if sn sn cp sn ht sn cp sn sn sn                           if   bd bd cp sn ht sn if sn sn if mt ht    bd sn cp ~"
  -- 3* 4 3* 4 4 , 3* 4 3* 3* 4

d4 $ slow 8 $ sound "if"

d1 $ slow 4 $ sound "bd cp"

d2 $ slow 2 $ sound "lt ht ht"

d3 $ slow (1/2) $ 0 <~ sound "ho ~ ho:1" 
    |+| gain "0.7"

d2 $ silence

cps 0.7

hush

d1 $ slow 8 $ sound "psr*8" |+| pit (-21) "0 8 18" |+| gain "1.3"
d2 $ slow 4 $ sound "psr*8" |+| (1/4) <~ pit (18) "0 8 18" |+| gain "1.3"
d3 $ slow 2 $ sound "psr*16" |+| (1/2) <~ pit (-21) "4 25 41"
d4 $ sound "psr*20"          |+| (2/4) <~ pit (13-21) "18 23 41"
d8 $ slow 0.5 $ (sound $ "hh hh hh*2") |+| pan (slow 3 $ sinewave1) |+| gain "0.4"
d5 $ sound $ "gabba:1 sn:1*2 sn:2"
d6 $ slow 2 $ sound $ "gabba cp cp:2*2 cp"
d7 $ slow 4 $ sound $ "if ~ ~ [~ cr] ~ ~ ~ [~ cr:3]"

cps 1

hush

d5 $ solo

d2 $ slow 2 $ sound "arpy arp feel*4 arpy*4"

d1 $ slow 2 $ sound "{bd ht if:1, if cp }"

d3 $ slow 1.5 $ sound "bd cp*2 bd cp"

d1 $ slow 1 $ sound "bd cp"
d2 $ slow 8 $ sound "if:1 haw:1"
d3 $ slow 2 $ (0/14) <~ sound $ ("bd sn sn sn sn sn sn sn"
d4 $ slow 4 $ sound $ (1/16) <~ "bd sn sn sn sn sn sn sn"



d3 $ silence

hush
